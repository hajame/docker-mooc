###################
Before optimization
####################


backend 447MB
---------------
FROM golang:1.16-alpine

WORKDIR /usr/src/app
COPY . .

RUN go build && adduser -D appuser

USER appuser

CMD ./server



frontend 455MB
--------------
FROM ubuntu:18.04

WORKDIR /usr/src/app
COPY . .

RUN apt-get update && \ 
apt-get install -y curl ca-certificates && \ 
curl -sL https://deb.nodesource.com/setup_14.x | bash && \
apt-get install -y nodejs && \
apt-get purge -y --auto-remove curl && \ 
    rm -rf /var/lib/apt/lists/* && \
    useradd -m appuser && \
    npm install && \
    npm run build && \
    npm install -g serve

USER appuser

CMD serve -s -l 5000 build




###################
After optimization
####################

starting with docker-compose
http://localhost/api/ping   - works
http://localhost/           - buttons work


backend 447MB (I was already using the alpine image, 
                there isn't much stuff to remove, 
                I'm so not going to optimise further in this exercise)
---------------
FROM golang:1.16-alpine

WORKDIR /usr/src/app
COPY . .

RUN go build && adduser -D appuser

USER appuser

CMD ./server





frontend 344MB (down from 455! nice!)
--------------
FROM node:14-alpine  # I had to use an older version, 
                     # 17-alpine wouldn't build..

WORKDIR /usr/src/app
COPY . .

RUN adduser -D appuser && \
    npm install && \
    npm run build && \
    npm install -g serve

USER appuser

CMD serve -s -l 5000 build